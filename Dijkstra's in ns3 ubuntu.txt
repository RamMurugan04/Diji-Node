import ns.applications
import ns.core
import ns.internet
import ns.network
import ns.point_to_point
import networkx as nx
import matplotlib.pyplot as plt
ns.core.GlobalValue.Bind("SimulatorImplementationType", ns.core.StringValue("ns3::RealtimeSimulatorImpl"))
ns.core.GlobalValue.Bind("ChecksumEnabled", ns.core.BooleanValue(False))

import ns.flow_monitor
 
# Define a function to calculate the shortest path using Dijkstra's algorithm
def shortest_path_dijkstra(node, edge, source, dest):
    # Create a graph object
    graph = nx.Graph()

    # Add nodes to the graph
    for i in range(node.GetN()):
        graph.add_node(node.Get(i))

    # Add edges to the graph
    for edge in edge:
        graph.add_edge(edge[0], edge[1], weight=edge[2])

    # Find the shortest path between the source and destination nodes
    path = nx.shortest_path(graph, source=source, target=dest, weight='weight')

    #Display the Graph using matplotlib
    edge_labels = nx.get_edge_attributes(graph, 'weight')
    pos = nx.spring_layout(graph)
    nx.draw_networkx_nodes(graph, pos)
    nx.draw_networkx_edges(graph, pos)
    nx.draw_networkx_labels(graph, pos)
    nx.draw_networkx_edge_labels(graph, pos, edge_labels=edge_labels)
    #nx.draw(graph, with_labels=True)
    plt.show()

    # Return the path as a list of nodes
    return path



# Define the NS-3 simulation environment
sim_time = ns.core.Seconds(10.0)
nodes = ns.network.NodeContainer()
nodes.Create(4)

# Set up point-to-point connections between nodes
p2p = ns.point_to_point.PointToPointHelper()
p2p.SetDeviceAttribute("DataRate", ns.core.StringValue("5Mbps"))
p2p.SetChannelAttribute("Delay", ns.core.StringValue("2ms"))

devices1 = p2p.Install(nodes.Get(0),nodes.Get(1))
devices2 = p2p.Install(nodes.Get(1),nodes.Get(2))
devices3 = p2p.Install(nodes.Get(2),nodes.Get(3))
devices4 = p2p.Install(nodes.Get(3),nodes.Get(0))
devices5 = p2p.Install(nodes.Get(0),nodes.Get(2))
devices6 = p2p.Install(nodes.Get(1),nodes.Get(3))

# Set up internet stack on nodes
internet = ns.internet.InternetStackHelper()
internet.Install(nodes)

# Assign IP addresses to devices
address1 = ns.internet.Ipv4AddressHelper()
address1.SetBase(ns.network.Ipv4Address("10.1.1.0"), ns.network.Ipv4Mask("255.255.255.0"))
address2 = ns.internet.Ipv4AddressHelper()
address2.SetBase(ns.network.Ipv4Address("10.1.2.0"),ns.network.Ipv4Mask("255.255.255.0"))
address3 = ns.internet.Ipv4AddressHelper()
address3.SetBase(ns.network.Ipv4Address("10.1.3.0"),ns.network.Ipv4Mask("255.255.255.0"))
interfaces1 = address1.Assign(devices1)
interfaces2 = address2.Assign(devices2)
interfaces3 = address3.Assign(devices3)
interfaces4 = address1.Assign(devices4)
interfaces5 = address2.Assign(devices5)
interfaces6 = address3.Assign(devices6)

# Generate traffic between nodes
#source = ns.applications.OnOffHelper("ns3::UdpSocketFactory", ns.network.InetSocketAddress(interfaces.GetAddress(0), 10))
#source.SetAttribute("Remote", ns.network.AddressValue(interfaces.GetAddress(1)))
#source.SetAttribute("MaxBytes", ns.core.UintegerValue(1024))
#sink = ns.applications.UdpEchoServerHelper(10)
#apps = source.Install(nodes.Get(0))
#apps.Add(sink.Install(nodes.Get(1)))

echoServer1 = ns.applications.UdpEchoServerHelper(9)

serverApps1 = echoServer1.Install(nodes.Get(1))
serverApps1.Start(ns.core.Seconds(1.0))
serverApps1.Stop(ns.core.Seconds(10.0))

address1 = interfaces1.GetAddress(1)
echoClient1 = ns.applications.UdpEchoClientHelper(address1, 9)
echoClient1.SetAttribute("MaxPackets", ns.core.UintegerValue(1))
echoClient1.SetAttribute("Interval", ns.core.TimeValue(ns.core.Seconds(1.0)))
echoClient1.SetAttribute("PacketSize", ns.core.UintegerValue(1024))

clientApps1 = echoClient1.Install(nodes.Get(0))
clientApps1.Start(ns.core.Seconds(2.0))
clientApps1.Stop(ns.core.Seconds(10.0))

echoServer2 = ns.applications.UdpEchoServerHelper(10)

serverApps2 = echoServer2.Install(nodes.Get(3))
serverApps2.Start(ns.core.Seconds(1.0))
serverApps2.Stop(ns.core.Seconds(10.0))

address2 = interfaces3.GetAddress(1)
echoClient2 = ns.applications.UdpEchoClientHelper(address2, 10)
echoClient2.SetAttribute("MaxPackets", ns.core.UintegerValue(1))
echoClient2.SetAttribute("Interval", ns.core.TimeValue(ns.core.Seconds(1.0)))
echoClient2.SetAttribute("PacketSize", ns.core.UintegerValue(1024))

clientApps2 = echoClient2.Install(nodes.Get(2))
clientApps2.Start(ns.core.Seconds(2.0))
clientApps2.Stop(ns.core.Seconds(10.0))

#Monitor the traffic

# Create a FlowMonitor object
monitor = ns.flow_monitor.FlowMonitorHelper()

# Install the monitor on all nodes
monitor.InstallAll()

# Collect the statistics from the monitor
stats = monitor.GetMonitorTotalFlowStats()

# Start the simulation
ns.core.Simulator.Run()

# Collect the statistics from the monitor
stats = monitor.GetMonitorTotalFlowStats()

# Print the statistics
for flow_id, flow_stats in stats.items():
    print("Flow ID:", flow_id)
    print("  Tx Bytes:", flow_stats.txBytes)
    print("  Rx Bytes:", flow_stats.rxBytes)
    print("  Tx Packets:", flow_stats.txPackets)
    print("  Rx Packets:", flow_stats.rxPackets)
    print("  Throughput:", flow_stats.rxBytes / ns.core.Simulator.Now().GetSeconds())


# Get the shortest path between nodes using Dijkstra's algorithm
edges = [(0, 1, 3), (1, 2, 1), (2, 3, 4), (3, 0, 7), (0, 2, 5), (1, 3, 6)] # Define edges as tuples of (src, dest, weight)
path = shortest_path_dijkstra(nodes, edges, 0, 2)
print("Shortest path between nodes 0 and 2:", path)

# Stop the simulation and clean up
ns.core.Simulator.Destroy()
